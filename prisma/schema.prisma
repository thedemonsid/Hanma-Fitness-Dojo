// Generator configuration for Prisma Client
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // Connection pooling URL for optimized performance
  directUrl = env("POSTGRES_URL_NON_POOLING") // Direct connection URL, used when pooling is not required
}

enum UserRole {
  USER
  TRAINER
  ADMIN
}

model User {
  id                String           @id @default(cuid())
  kindeId           String           @unique
  name              String
  email             String           @unique
  age               Int?
  gender            String?
  weight            Float?
  height            Float?
  fitnessGoal       String?
  imageUrl          String?
  role              UserRole         @default(USER)
  meal_histories    MealHistory[]
  workout_histories WorkoutHistory[]
  createdAt         DateTime         @default(now()) @map(name: "created_at")
  updatedAt         DateTime         @updatedAt @map(name: "updated_at")

  @@index([email])
  @@map(name: "users")
}

// Connected to user with a one-to-many relationship meaning a user can have multiple meal histories
model MealHistory {
  id        String         @id @default(cuid())
  meals     MealInstance[]
  createdAt DateTime       @default(now()) @map(name: "created_at")
  updatedAt DateTime       @updatedAt @map(name: "updated_at")
  User      User           @relation(fields: [userEmail], references: [email], onDelete: Cascade)
  userEmail String         @unique

  @@index([userEmail])
  @@map(name: "meal_histories")
}

// MealInstance model for individual meal records within a user's meal history
// Connected to meal and meal history with a many-to-one relationship meaning a meal instance can have only one meal and meal history
model MealInstance {
  id             String      @id @default(cuid())
  servingInGrams Int
  isCompleted    Boolean     @default(false)
  meal           Meal        @relation(fields: [mealId], references: [id])
  mealId         String
  MealHistory    MealHistory @relation(fields: [mealHistoryId], references: [id], onDelete: Cascade)
  mealHistoryId  String
  createdAt      DateTime    @default(now()) @map(name: "created_at")
  updatedAt      DateTime    @updatedAt @map(name: "updated_at")

  @@map(name: "meal_instances")
}

// Meal model for defining a meal, including nutritional information and preparation details
model Meal {
  id           String         @id @default(cuid())
  name         String         @unique
  recipe       String?
  calories     Float          @default(0)
  protein      Float          @default(0)
  carbs        Float          @default(0)
  fats         Float          @default(0)
  fiber        Float          @default(0)
  imageUrl     String
  videoUrl     String?
  createdAt    DateTime       @default(now()) @map(name: "created_at")
  updatedAt    DateTime       @updatedAt @map(name: "updated_at")
  MealInstance MealInstance[]

  @@map(name: "meals")
}

// WorkoutHistory model for tracking a user's workout history
// Connected to user with a one-to-many relationship meaning a user can have multiple workout histories
model WorkoutHistory {
  id        String            @id @default(cuid())
  workouts  WorkoutInstance[]
  createdAt DateTime          @default(now()) @map(name: "created_at")
  updatedAt DateTime          @updatedAt @map(name: "updated_at")
  User      User              @relation(fields: [userEmail], references: [email], onDelete: Cascade)
  userEmail String            @unique

  @@index([userEmail])
  @@map(name: "workout_histories")
}

// WorkoutInstance model for individual workout records within a user's workout history
// Connected to workout and workout history with a many-to-one relationship meaning a workout instance can have only one workout and workout history
model WorkoutInstance {
  id               String         @id @default(cuid())
  sets             Int            @default(3)
  repsPerSet       Int[]
  weightsPerSet    Float[]
  isCompleted      Boolean        @default(false)
  workout          Workout        @relation(fields: [workoutId], references: [id])
  workoutId        String
  workoutHistory   WorkoutHistory @relation(fields: [workoutHistoryId], references: [id], onDelete: Cascade)
  workoutHistoryId String
  createdAt        DateTime       @default(now()) @map(name: "created_at")
  updatedAt        DateTime       @updatedAt @map(name: "updated_at")

  @@map(name: "workout_instances")
}

// Workout model for defining a workout, including details on how to perform it and its difficulty level
model Workout {
  id               String            @id @default(cuid())
  name             String            @unique
  howToDo          String            @map(name: "how_to_do")
  duration         Int
  movementType     MovementType      @default(FULL_BODY)
  targetMuscle     TargetMuscle[]
  difficulty       Difficulty        @default(BEGINNER)
  imageUrl         String
  videoUrl         String
  createdAt        DateTime          @default(now()) @map(name: "created_at")
  updatedAt        DateTime          @updatedAt @map(name: "updated_at")
  workout_instance WorkoutInstance[]

  @@map(name: "workouts")
}

enum Difficulty {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

enum MovementType {
  PUSH
  PULL
  LEGS
  CORE
  FULL_BODY
}

enum TargetMuscle {
  CHEST
  BACK
  SHOULDERS
  BICEPS
  TRICEPS
  FOREARMS
  ABS
  QUADS
  HAMSTRINGS
  CALVES
  GLUTES
  ADDUCTORS
  ABDUCTORS
  TRAPS
  LATS
  LOWER_BACK
}
